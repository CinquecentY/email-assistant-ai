generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clients {
  id          String   @id @default(cuid())
  name        String
  email       String
  phoneNumber String
  city        String
  country     String
  ownerId     String
  status      String
  createdAt   DateTime @default(now())
  createdBy   String

  Documents Documents[]

  Events Events[]

  History History[]

  Notes Notes[]

  User Users @relation(fields: [ownerId], references: [id], onDelete: NoAction)
}

model Documents {
  id        String   @id @default(cuid())
  type      String
  clientId  String
  amount    Int
  products  String
  status    String
  createdAt DateTime
  createdBy String
  Client    Clients  @relation(fields: [clientId], references: [id], onDelete: NoAction)
  User      Users    @relation(fields: [createdBy], references: [id], onDelete: NoAction)
}

model Events {
  id          String   @id @default(cuid())
  clientId    String
  ownerId     String
  name        String
  description String
  startingAt  DateTime
  endingAt    DateTime
  createdAt   DateTime @default(now())
  createdBy   String
  Client      Clients  @relation(fields: [clientId], references: [id], onDelete: NoAction)
  User        Users    @relation(fields: [createdBy], references: [id], onDelete: NoAction)
}

model History {
  id        String   @id @default(cuid())
  clientId  String
  action    String
  createdAt DateTime
  createdBy String
  Client    Clients  @relation(fields: [clientId], references: [id], onDelete: NoAction)
  User      Users    @relation(fields: [createdBy], references: [id], onDelete: NoAction)
}

model Notes {
  id          String   @id @default(cuid())
  clientId    String
  description String
  createdAt   DateTime @default(now())
  createdBy   String
  Client      Clients  @relation(fields: [clientId], references: [id], onDelete: NoAction)
  User        Users    @relation(fields: [createdBy], references: [id], onDelete: NoAction)
}

model Users {
  id        String      @id @default(cuid())
  email     String?     @unique
  name      String?
  createdAt DateTime    @default(now())
  Clients   Clients[]
  Documents Documents[]
  Events    Events[]
  History   History[]
  Notes     Notes[]

  Account Accounts[]

  Template Template[]
}

model Accounts {
  id     String @id @default(cuid())
  userId String

  binaryIndex Json?

  token    String @unique
  provider String
  email    String
  name     String

  nextDeltaToken String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  Thread Thread[]

  EmailAddress EmailAddress[]
}

model Thread {
  id              String   @id @default(cuid())
  subject         String
  lastMessageDate DateTime
  participantIds  String[]
  accountId       String
  account         Accounts @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  done Boolean @default(false)

  inboxStatus Boolean @default(true)
  draftStatus Boolean @default(false)
  sentStatus  Boolean @default(false)

  emails Email[]

  @@index([accountId])
  @@index([done])
  @@index([inboxStatus])
  @@index([draftStatus])
  @@index([sentStatus])
  @@index([lastMessageDate])
}

model Email {
  id                   String                @id @default(cuid())
  threadId             String
  thread               Thread                @relation(fields: [threadId], references: [id], onDelete: Cascade)
  createdTime          DateTime
  lastModifiedTime     DateTime
  sentAt               DateTime
  receivedAt           DateTime
  internetMessageId    String
  subject              String
  sysLabels            String[]
  keywords             String[]
  sysClassifications   String[]
  sensitivity          Sensitivity           @default(normal)
  meetingMessageMethod MeetingMessageMethod?
  from                 EmailAddress          @relation("FromEmail", fields: [fromId], references: [id], onDelete: Cascade)
  fromId               String
  to                   EmailAddress[]        @relation("ToEmails")
  cc                   EmailAddress[]        @relation("CcEmails")
  bcc                  EmailAddress[]        @relation("BccEmails")
  replyTo              EmailAddress[]        @relation("ReplyToEmails")
  hasAttachments       Boolean
  body                 String?
  bodySnippet          String?
  attachments          EmailAttachment[]
  inReplyTo            String?
  references           String?
  threadIndex          String?
  internetHeaders      Json[]
  nativeProperties     Json?
  folderId             String?
  omitted              String[]

  emailLabel EmailLabel @default(inbox)

  @@index([threadId])
  @@index([emailLabel])
  @@index([sentAt])
}

enum EmailLabel {
  inbox
  sent
  draft
}

model EmailAddress {
  id            String  @id @default(cuid())
  name          String?
  address       String
  raw           String?
  sentEmails    Email[] @relation("FromEmail")
  receivedTo    Email[] @relation("ToEmails")
  receivedCc    Email[] @relation("CcEmails")
  receivedBcc   Email[] @relation("BccEmails")
  replyToEmails Email[] @relation("ReplyToEmails")

  accountId String
  account   Accounts @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([accountId, address])
}

model EmailAttachment {
  id              String  @id @default(cuid())
  name            String
  mimeType        String
  size            Int
  inline          Boolean
  contentId       String?
  content         String?
  contentLocation String?
  Email           Email   @relation(fields: [emailId], references: [id], onDelete: Cascade)
  emailId         String
}

model Template {
  id          String   @id @default(cuid())
  name        String
  text        String
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  createdBy   String
  User        Users    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

enum Sensitivity {
  normal
  private
  personal
  confidential
}

enum MeetingMessageMethod {
  request
  reply
  cancel
  counter
  other
}
